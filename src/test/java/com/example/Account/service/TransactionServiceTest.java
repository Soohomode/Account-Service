package com.example.Account.service;

import com.example.Account.domain.Account;
import com.example.Account.domain.AccountUser;
import com.example.Account.domain.Transaction;
import com.example.Account.dto.TransactionDto;
import com.example.Account.exception.AccountException;
import com.example.Account.repository.AccountRepository;
import com.example.Account.repository.AccountUserRepository;
import com.example.Account.repository.TransactionRepository;
import com.example.Account.type.AccountStatus;
import com.example.Account.type.ErrorCode;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Optional;

import static com.example.Account.type.AccountStatus.IN_USE;
import static com.example.Account.type.TransactionResultType.F;
import static com.example.Account.type.TransactionResultType.S;
import static com.example.Account.type.TransactionType.USE;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class TransactionServiceTest {
    @Mock
    private TransactionRepository transactionRepository;

    @Mock
    private AccountRepository accountRepository;

    @Mock
    private AccountUserRepository accountUserRepository;

    @InjectMocks
    private TransactionService transactionService;

    @Test
    void successUseBalance() {
        //given
        AccountUser user = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));

        // Îî∞Î°ú ÎΩëÏùÄ Í≥ÑÏ¢å Ï†ïÎ≥¥
        Account account = Account.builder()
                .accountUser(user)
                .accountStatus(IN_USE)
                .balance(10000L)
                .accountNumber("1000000012").build();

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(account));
        given(transactionRepository.save(any()))
                .willReturn(Transaction.builder()
                        .account(account)
                        .transactionType(USE)
                        .transactionResultType(S)
                        .transactionId("transactionId")
                        .transactedAt(LocalDateTime.now())
                        .amount(1000L)
                        .balanceSnapshot(9000L)
                        .build());

        ArgumentCaptor<Transaction> captor = ArgumentCaptor.forClass(Transaction.class);

        //when
        TransactionDto transactionDto = transactionService.useBalance(
                1L, "1000000000", 200L);

        //then 10000ÏõêÏóêÏÑú 1000Ïõê ÏçºÏúºÎãà 9000Ïõê ÏùºÍ≤ÉÏù¥Îã§
        verify(transactionRepository, times(1)).save(captor.capture());
        assertEquals(200L, captor.getValue().getAmount());
        assertEquals(9800L, captor.getValue().getBalanceSnapshot());

        assertEquals(9000L, transactionDto.getBalanceSnapshot()); // ÏûîÏï°
        assertEquals(1000L, transactionDto.getAmount()); // Í±∞Îûò Í∏àÏï°
        assertEquals(S, transactionDto.getTransactionResultType()); // ÏÑ±Í≥µÏó¨Î∂Ä
        assertEquals(USE, transactionDto.getTransactionType()); // ÏÇ¨Ïö© or Ï∑®ÏÜå
    }

    @Test
    @DisplayName("Ìï¥Îãπ Ïú†Ï†Ä ÏóÜÏùå - ÏûîÏï° ÏÇ¨Ïö© Ïã§Ìå®üí¶")
    void useBalance_UserNotFound() {
        //given
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.empty());

        //when
        AccountException accountException = assertThrows(AccountException.class,
                () -> transactionService.useBalance(1L, "1000000000", 1000L));

        //then
        assertEquals(ErrorCode.USER_NOT_FOUND, accountException.getErrorCode());
    }

    @Test
    @DisplayName("Ìï¥Îãπ Í≥ÑÏ¢å ÏóÜÏùå - ÏûîÏï° ÏÇ¨Ïö© Ïã§Ìå®")
    void deleteAccount_AccountNotFound() {
        //given
        AccountUser user = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.empty());

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> transactionService.useBalance(1L, "1000000000", 1000L));

        //then
        assertEquals(ErrorCode.ACCOUNT_NOT_FOUND, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í≥ÑÏ¢å ÏÜåÏú†Ï£º Îã§Î¶Ñ - ÏûîÏï° ÏÇ¨Ïö© Ïã§Ìå®")
    void deleteAccountFailed_userUnMatch() {
        //given
        AccountUser Pobi = AccountUser.builder() // Ïú†Ï†Ä 1
                .id(12L)
                .name("Pobi").build();
        AccountUser Yuri = AccountUser.builder() // Ïú†Ï†Ä 2
                .id(13L)
                .name("Yuri").build();
        given(accountUserRepository.findById(anyLong())) // id
                .willReturn(Optional.of(Pobi)); // Ìè¨ÎπÑÏòÄÎäîÎç∞
        given(accountRepository.findByAccountNumber(anyString())) // Í≥ÑÏ¢åÎ≤àÌò∏
                .willReturn(Optional.of(Account.builder()
                        .accountUser(Yuri) // Í≥ÑÏ¢åÏùò ÏÜåÏú†Ï£ºÎäî Ïú†Î¶¨Ïù¥Îã§
                        .balance(0L)
                        .accountNumber("1000000012").build()));

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> transactionService.useBalance(1L, "1234567890", 1000L));

        //then
        assertEquals(ErrorCode.USER_ACCOUNT_UN_MATCH, exception.getErrorCode());
    }

    @Test
    @DisplayName("Ìï¥ÏßÄÎêú Í≥ÑÏ¢åÎäî ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
    void deleteAccountFailed_alreadyUnRegistered() {
        //given
        AccountUser Pobi = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(Pobi)); // Ìè¨ÎπÑ
        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(Account.builder()
                        .accountUser(Pobi) // Ìè¨ÎπÑ
                        .accountStatus(AccountStatus.UNREGISTERED)
                        .balance(0L)
                        .accountNumber("1000000012").build()));

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> transactionService.useBalance(1L, "1234567890", 1000L));

        //then
        assertEquals(ErrorCode.ACCOUNT_ALREADY_UNREGISTERED, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í±∞Îûò Í∏àÏï°Ïù¥ ÏûîÏï°Î≥¥Îã§ ÌÅ∞ Í≤ΩÏö∞")
    void exceedAmount_UseBalance() {
        //given
        AccountUser user = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));

        // Îî∞Î°ú ÎΩëÏùÄ Í≥ÑÏ¢å Ï†ïÎ≥¥
        Account account = Account.builder()
                .accountUser(user)
                .accountStatus(IN_USE)
                .balance(100L) // 100Ïõê Î∞ñÏóê ÏóÜÎã§
                .accountNumber("1000000012").build();

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(account));



        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> transactionService.useBalance(1L, "1234567890", 1000L));

        //then
        assertEquals(ErrorCode.AMOUNT_EXCEED_BALANCE, exception.getErrorCode());
        verify(transactionRepository, times(0)).save(any());
    }

    @Test
    @DisplayName("Ïã§Ìå® Ìä∏ÎûúÏû≠ÏÖò Ï†ÄÏû• ÏÑ±Í≥µ")
    void saveFailedUseTransaction() {
        //given
        AccountUser user = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();

        // Îî∞Î°ú ÎΩëÏùÄ Í≥ÑÏ¢å Ï†ïÎ≥¥
        Account account = Account.builder()
                .accountUser(user)
                .accountStatus(IN_USE)
                .balance(10000L)
                .accountNumber("1000000012").build();

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(account));
        given(transactionRepository.save(any()))
                .willReturn(Transaction.builder()
                        .account(account)
                        .transactionType(USE)
                        .transactionResultType(S)
                        .transactionId("transactionId")
                        .transactedAt(LocalDateTime.now())
                        .amount(1000L)
                        .balanceSnapshot(9000L)
                        .build());

        ArgumentCaptor<Transaction> captor = ArgumentCaptor.forClass(Transaction.class);

        //when
        transactionService.saveFailedUseTransaction("1000000000", 200L);

        //then 10000ÏõêÏóêÏÑú 1000Ïõê ÏçºÏúºÎãà 9000Ïõê ÏùºÍ≤ÉÏù¥Îã§
        verify(transactionRepository, times(1)).save(captor.capture());
        assertEquals(200L, captor.getValue().getAmount());
        assertEquals(10000L, captor.getValue().getBalanceSnapshot()); // Í≤∞Ï†ú Ïã§Ìå®ÌñàÏúºÎãà Í∑∏ÎåÄÎ°ú
        assertEquals(F, captor.getValue().getTransactionResultType()); // ÏÑ±Í≥µÏó¨Î∂Ä
    }
}